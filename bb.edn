{:tasks
 {:requires ([babashka.fs :as fs]
             [babashka.cli :as cli]
             [babashka.process :refer [shell]])

  :init (do
          (def opts (let [spec {:to {:default 10 :coerce :long}
                                :from {:default 1 :coerce :long}
                                :runs {:default 10 :coerce :long}
                                :index {:default 0 :coerce :long}
                                :warmup {:default 5 :coerce :long}
                                :object {:default "subset" :coerce :string}}]
                      (cli/parse-opts *command-line-args* {:spec spec})))
          (def tag (.format (java.time.LocalDateTime/now)
                            (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd-HH-mm-ss")))
          (defn ->processed [{:keys [object from to warmup runs]} operation]
            (shell (str "hyperfine "
                        "--warmup " warmup " "
                        "--shell none "
                        "--runs " runs " "
                        "--export-json ./data/" operation "-" object "-object-from-" from "-to-" to "__" tag ".json "
                        "--parameter-scan points " from " " to " "
                        "'./nulls --" operation "-" object "-object \"{:n {points}}\"'"))))

  build (let [file-name "nulls"
              file-jar (str file-name ".jar")
              ->paths (fn [] (fs/glob "./target/uberjar" "*-standalone.jar"))
              run-native (str "native-image -jar "
                              (first (->paths))
                              " --no-server"
                              " --no-fallback"
                              " --features=clj_easy.graal_build_time.InitClojureClasses"
                              " "
                              file-name)]
          (when (fs/exists? file-name)
            (fs/delete file-name))
          (shell "lein uberjar")
          (shell run-native))

  plot (let [{:keys [path]} (cli/parse-opts *command-line-args* {:spec {:path {:coerce :string}}})]
         (shell (str "./script/plot.py" " " path)))

  generate (->processed opts "generate")
  enumerate (->processed opts "enumerate")}}
